/**
 * Test the UserVector L2 norm bound ZKP.
 */
public static void main(String[] args) {
        int k = 512;
        int m = 10;
        int nLoops = 10;
        int l = 40;
        boolean doBench = false;
        boolean worstcase = false;
        // test the worst case cost. i.e. every vector should pass. this is
        // when the verifier spends longest time.

        // Definie the number of iterations that the bound ZKP must have:
        int zkpIterations = 50;  // This is the N in the paper

        for (int i = 0; i < args.length; ) {
        String arg = args[i++];
        if(arg.length() > 0 && arg.charAt(0) == '-') {
        if (arg.equals("-k")) {
        try {
        k = Integer.parseInt(args[i++]);
        }
        catch (NumberFormatException e) {
        k = 512;
        }
        }
        else if(arg.equals("-m")) {
        try {
        m = Integer.parseInt(args[i++]);
        }
        catch (NumberFormatException e) {
        m = 10;
        }
        }
        else if(arg.equals("-N")) {
        try {
        zkpIterations = Integer.parseInt(args[i++]);
        }
        catch (NumberFormatException e) {
        zkpIterations = 50;
        }
        }

        else if(arg.equals("-o")) {
        try {
        nLoops = Integer.parseInt(args[i++]);
        }
        catch (NumberFormatException e) {
        nLoops = 10;
        }
        }

        else if(arg.equals("-l")) {
        try {
        l = Integer.parseInt(args[i++]);
        if(l > 52) {
        System.out.println("The system does not support l > 52. This will make "
        + "the field order too high so that it is not a small"
        + " field any more.");
        System.exit(0);
        }
        }
        catch (NumberFormatException e) {
        l = 40;
        }
        }

        else if(arg.equals("-d")) {
        debug = true;
        }
        else if(arg.equals("-w")) {
        worstcase = true;
        // test the worst case cost. i.e. every vector should pass.
        // this is when the verifier spends longest time.
        }
        else if(arg.equals("-bench")) {
        doBench = true;
        }
        }
        }

        System.out.println("k = " + k);
        System.out.println("m = " + m);
        System.out.println("nLoops = " + nLoops);

        // Setup the parameters:
        P4PParameters.initialize(k, false);
        SecureRandom rand = null;
        try {
        rand = SecureRandom.getInstance("SHA1PRNG");
        }
        catch(java.security.NoSuchAlgorithmException e) {
        System.err.println("NoSuchAlgorithmException!");
        e.printStackTrace();
        rand = new SecureRandom();
        }

        rand.nextBoolean();

        // Lets make l = log_2 (m)
        long L = ((long)2)<<l - 1;
        long F = BigInteger.probablePrime(l+10, rand).longValue();
        // Make the field size to be 10 bits larger than l

        // Or just make F 62 bits? Note that we can't use 64 bit since there is no
        // unsigned long in java.
        F = BigInteger.probablePrime(62, rand).longValue();

        System.out.println("l = " + l + ", L = " + L);
        System.out.println("F = " + F);
        System.out.println("zkpIterations = " + zkpIterations);

        // Generate the data and the checksum coefficient vector:
        long[] data = new long[m];
        int[][] c = new int[zkpIterations][];
        NativeBigInteger[] bi = P4PParameters.getGenerators(2);

        for(int j = 0; j < zkpIterations; j++)
        c[j] = new int[m];

        int nfails = 0;

        StopWatch proverWatch = new StopWatch();
        StopWatch verifierWatch = new StopWatch();
        long innerProductTime = 0;
        long randChallengeTime = 0;
        boolean shouldPass = false;

        System.out.println("Testing UserVector L2 bound ZKP for " + nLoops + " loops .");
        long start = System.currentTimeMillis();
        double delta = 1.5;

        for(int i = 0; i < nLoops; i++) {
        if(worstcase) shouldPass = true;     // Test the worst case
        else shouldPass = rand.nextBoolean();

        if(shouldPass) delta = 0.5;
        else delta = 2.0;
        double l2 = (double)L*delta;
        double ll2 = 0.;

        data = Util.randVector(100, F, l2);
        for(int j = 0; j < m; j++) {
        ll2 += (double)data[j]*(double)data[j];
        }
        ll2 = Math.sqrt(ll2);


        //                 for(int j = 0; j < zkpIterations; j++) {
        //                     c[j] = new int[m];
        //                     for(int kk = 0; kk < m; kk++) {
        //                         c[j][kk] = rand.nextBoolean() ? 1 : 0;
        //                         if(c[j][kk] == 1) // flip half of the 1's
        //                             c[j][kk] = rand.nextBoolean() ? 1 : -1;
        //                     }
        //                 }

        // The following is more efficient in generating the random challenges
        byte[] randBytes = new byte[(int)Math.ceil(2*zkpIterations*m/8)];
        long t0 = System.currentTimeMillis();
        rand.nextBytes(randBytes);
        for(int j = 0; j < zkpIterations; j++) {
        for(int kk = 0; kk < m; kk++) {
        int byteIndex = (int)2*(j*m + kk)/8;
        int offset = 2*(j*m + kk)%8;
        c[j][kk] = (randBytes[byteIndex] & (1<<offset)) > 0 ? 1 : 0;
        if(c[j][kk] == 1) // flip half of the 1's
        c[j][kk] = (randBytes[byteIndex]
        & (1<<(offset+1))) > 0 ? 1 : -1;
        }
        }
        randChallengeTime += (System.currentTimeMillis() - t0);

        // Lets test how much time an inner product takes
        t0 = System.currentTimeMillis();
        Util.innerProduct(c[0], data);
        innerProductTime += (System.currentTimeMillis()-t0);

        UserVector2 uv = new UserVector2(data, F, l, bi[0], bi[1]);
        data = uv.getUserData();
        uv.generateShares();
        uv.setChecksumCoefficientVectors(c);
        proverWatch.start();
        L2NormBoundProof2 peerProof =
        (L2NormBoundProof2)uv.getL2NormBoundProof2(false);
        L2NormBoundProof2 serverProof =
        (L2NormBoundProof2)uv.getL2NormBoundProof2(true);
        proverWatch.pause();

        shouldPass = l2 < L;
            verifierWatch.start();
                    uv.verify2(peerProof);   // Must verify peer proof first
                    boolean didPass = uv.verify2(serverProof);
                    verifierWatch.pause();

                    if(shouldPass != didPass) {
                    nfails++;
                    System.out.println("Test No. " + i + " failed. shouldPass = "
                    + shouldPass + ", result = " + didPass
                    + ". l2 = " + l2
                    + ". ll2 = " + ll2);
                    }
                    else
                    System.out.println("Test No. " + i
                    + " passed. shouldPass = didPass = "
                    + shouldPass
                    + ". l2 = " + l2
                    + ". ll2 = " + ll2);
                    }
                    verifierWatch.stop();
                    proverWatch.stop();
                    long end = System.currentTimeMillis();

                    System.out.println("UserVector L2 norm ZKP: " + nLoops
                    + " loops. Failed " + nfails + " times. ms per loop:");
                    System.out.println("\n   Prover time          Verifier time             Total");
                    System.out.println("============================================================");
                    System.out.println("    " + (double)proverWatch.getElapsedTime()/(double)nLoops
                    + "                 "
                    + (double)verifierWatch.getElapsedTime()/(double)nLoops
                    + "                 "
                    + (double)(proverWatch.getElapsedTime()+verifierWatch.getElapsedTime())/(double)nLoops);
                    System.out.println("============================================================");
                    System.out.println("Total time: " + (end-start) + " ms. Average: "
                    + (double)(end-start)/(double)nLoops + " ms per loop"
                    + ". Failure rate: " + (double)nfails/(double)nLoops);

                    System.out.println("Time for doing 1 experiement (ms): "
                    + (double)(end-start)/(double)nLoops);
                    System.out.println("Time for doing 1 inner product (ms): "
                    + (double)innerProductTime/(double)nLoops);
                    System.out.println("Time for generating N challenge vectors (ms): "
                    + (double)randChallengeTime/(double)nLoops);


                    }